/********************************************************************************
 * Copyright (c) 2023 CrossBreeze.
 ********************************************************************************/

import {
  createDefaultModule,
  createDefaultSharedModule,
  DefaultSharedModuleContext,
  inject,
  Module,
  PartialLangiumServices,
  PartialLangiumSharedServices,
} from "langium";
import {
  AddedSharedModelServices,
  ExtendedLangiumServices,
  ExtendedServiceRegistry,
  ModelService,
  OpenableTextDocuments,
  OpenTextDocumentManager,
  SharedServices,
} from "model-service";
import { TextDocument } from "vscode-languageserver-textdocument";
import { WorkflowGeneratedModule, WorkflowGeneratedSharedModule } from "./generated/module.js";
import { WorkflowCodeActionProvider } from "./workflow-code-action.js";
import { WorkflowNameProvider } from "./workflow-naming.js";
import { WorkflowScopeComputation } from "./workflow-scope-computation.js";
import { WorkflowScopeProvider } from "./workflow-scope-provider.js";
import { WorkflowSerializer } from "./workflow-serializer.js";
import { registerValidationChecks, WorkflowValidator } from "./workflow-validator.js";
import { WorkflowWorkspaceManager } from "./workflow-workspace-manager.js";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type WorkflowAddedSharedServices = {
  workspace: {
    WorkspaceManager: WorkflowWorkspaceManager;
  };
};

export const WorkflowSharedServices = Symbol("WorkflowSharedServices");
export type WorkflowSharedServices = SharedServices & WorkflowAddedSharedServices;

export const WorkflowSharedModule: Module<
  WorkflowSharedServices,
  PartialLangiumSharedServices & WorkflowAddedSharedServices & AddedSharedModelServices
> = {
  ServiceRegistry: () => new ExtendedServiceRegistry(),
  workspace: {
    WorkspaceManager: (services) => new WorkflowWorkspaceManager(services),
    TextDocuments: () => new OpenableTextDocuments(TextDocument),
    TextDocumentManager: (services: any) => new OpenTextDocumentManager(services),
  },
  model: {
    ModelService: (services: any) => new ModelService(services),
  },
};

/***************************
 * Language Module
 ***************************/

export interface WorkflowModuleContext {
  shared: WorkflowSharedServices;
}

/**
 * Declaration of custom services - add your own service classes here.
 */
export interface WorkflowAddedServices {
  references: {
    NameProvider: WorkflowNameProvider;
  };
  validation: {
    WorkflowValidator: WorkflowValidator;
  };
  serializer: {
    Serializer: WorkflowSerializer;
  };
  /* override */ shared: WorkflowSharedServices;
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type WorkflowServices = ExtendedLangiumServices & WorkflowAddedServices;
export const WorkflowServices = Symbol("WorkflowServices");

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export function createWorkflowModule(
  context: WorkflowModuleContext
): Module<WorkflowServices, PartialLangiumServices & WorkflowAddedServices> {
  return {
    references: {
      ScopeProvider: (services) => new WorkflowScopeProvider(services),
      NameProvider: (services) => new WorkflowNameProvider(services),
      ScopeComputation: (services) => new WorkflowScopeComputation(services),
    },
    validation: {
      WorkflowValidator: () => new WorkflowValidator(),
    },
    lsp: {
      CodeActionProvider: (services) => new WorkflowCodeActionProvider(services),
    },
    serializer: {
      Serializer: (services) => new WorkflowSerializer(services),
    },
    shared: () => context.shared,
  };
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createWorkflowServices(context: DefaultSharedModuleContext): {
  shared: WorkflowSharedServices;
  Workflow: WorkflowServices;
} {
  const shared = inject(createDefaultSharedModule(context), WorkflowGeneratedSharedModule, WorkflowSharedModule);
  const Workflow = inject(createDefaultModule({ shared }), WorkflowGeneratedModule, createWorkflowModule({ shared }));
  shared.ServiceRegistry.register(Workflow);
  registerValidationChecks(Workflow);
  return { shared, Workflow };
}
